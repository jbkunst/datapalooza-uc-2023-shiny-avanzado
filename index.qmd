---
title: "<span style='color:white'>Shiny Avanzado</span>"
author: "<b style='color:white'>Joshua Kunst Fuentes @jbkunst</b>"
format:
  revealjs:
    theme: [default, css/custom.scss]
    transition: slide
    background-transition: fade
    navigation-mode: vertical
    # smaller: true
    scrollable: true
    progress: true #default
title-slide-attributes:
  data-background-image: imgs/titlebackground.jpg
  data-background-size: cover #contain
editor_options: 
  chunk_output_type: console
---

# Bienvenidos! { .bckgrnd background-image="imgs/nick-fewings-XqOBKnxDSfE-unsplash.jpg" }

## Antes de Partir { background-image="imgs/background2.jpg"}

- Respositorio: [https://github.com/jbkunst/datapalooza-uc-2023-shiny-avanzado](https://github.com/jbkunst/datapalooza-uc-2023-shiny-avanzado), para clonarlo en posit.cloud

- Presentación: [https://jkunst.com/datapalooza-uc-2023-shiny-avanzado/](https://jkunst.com/datapalooza-uc-2023-shiny-avanzado/)

- Un repaso: [https://jkunst.com/shiny-visualizacion-de-datos-con-R/clase-01.html](https://jkunst.com/shiny-visualizacion-de-datos-con-R/clase-01.html)

## Lo que veremos

**Reactividad**: 

  Expresiones reactivas, _Observers_ y Eventos
  
. . .  

**Módulos**: 

  Definición, utilidades, patrón de uso
  
. . .  

**htmlwidgets**:

  Proxies y eventos
  
. . .  

**HTML, CSS, JS**: 

  Introduccion, definiciones, etc.

## Dinámica

- Definiciones y motivaciones
- Revisión de ejemplos
- Ejercicios! 

## Paquete que utilizaremos

```{r, eval=FALSE, echo=TRUE}
install.packages(
  c("shiny", 
    "tidyverse", 
    "rvest",
    "leaflet",
    "DT",
    "highcharter",
    "plotly",
    "datos")
  )
```


# Reactividad { .bckgrnd background-image="imgs/reactivity-graph-00.png"}

## Reactividad

En una aplicación shiny, la lógica del _server_ se expresa en programación reactiva.

. . .

No tenemos que darle un comando a una aplicación shiny para que se actualice. Reacionará por sí solo.

. . .

Si un `input` cambia, automáticamente actualizará `outputs` (expresiones reactivas u `observer`s) que dependan de el.


::: aside
Muchos más detalles en [https://rstudio.github.io/reactlog/articles/reactlog.html](https://rstudio.github.io/reactlog/articles/reactlog.html).
:::

## Tipos de elementos 

De manera conceptual una _expresion reactiva_ es una expresión que cambiará en el tiempo.

- `reactive` crea una expresión reactiva, la cual cambia si una de los elementos reactivos que
depende cambia.

- `eventReactive` igual que el anterior pero se gatilla por el cambio de una variable reactiva.

- `observe` Crear una expresión reactiva que se ejecuta cuando una variable de la cual depende
cambia.

- `observeEvent` ídem al anterior pero se gatilla por el una expresión reactiva.


## Similitudes y Diferencias entre reactivos y observers.

**Similitudes**: Se gatillan por el cambio de alguna variable o expresión reactiva.

**Diferencias**: Expresiones reactivas retornan valores, los `observer`s no lo hacen.


## Patrón de uso

```{r, eval=FALSE, echo=TRUE}
server <- function(input, output) {
  
  variable_reactiva <- reactive({ 
    # calcular y rentornar algo, como una función.
    ... 
  })

  variable_reactiva <- reactiveEvent(expresion_reactiva, {
    # calcular y rentornar algo, si cambia `expresion_reactiva`.
    ... 
  })
  
  observe({ 
    # hacer algo si cambia algo que depende esta expresión.
    ... 
  })
  
  observeEvent(expresion_reactiva, { 
    # hacer algo si cambia `expresion_reactiva`.
    ... 
  }) 
  
}
```

## Shiny 1.6.0

Se agrega una función `bindEvent` el cual convierte `reactive`s y `observer`s
en su versión `Event`:

```{r, eval=FALSE, echo=TRUE}
server <- function(input, output) {
  
  # Equivalentes!
  var_react <- eventReactive(input$boton, { ... })
  var_react <- reactive({ ... }) |> bindEvent(input$boton)

  # Lo mismo!
  observeEvent(input$boton, { ... })
  observe({ ... }) |> bindEvent(input$boton)
}
```

::: aside
Más detalles en [https://www.rstudio.com/blog/shiny-1-6-0/](https://www.rstudio.com/blog/shiny-1-6-0/).
:::

## Resumen: tarea/`función`

- Calcular valores: **`reactive`** / `eventReactive`
- Ejecutar tareas: **`observe`** / `observeEvent`
- Almacenar valores: **`reactiveVal`** / `input` / `reactiveValues` 
- Prevenir reactivdad: **`isolate`**
- Chequear condiciones: **`req`**
- Reejecutar tareas cada cierto tiempo: **`invalidateLater`**

::: aside 
Más info en [https://rstudio-education.github.io/advanced-shiny-az/03-react-prog/03-react-prog.pdf](https://rstudio-education.github.io/advanced-shiny-az/03-react-prog/03-react-prog.pdf).
:::

## Revisar las siguientes apps

```{r results='asis'}
dir("apps/reactividad/", full.names = TRUE) |> 
  purrr::map_chr(~ stringr::str_glue("- {.x}")) |> 
  purrr::walk(~ {cat(.x); cat("\n")})
```

## Ejercicio: Paquete `reactlog`

El paquete `reactlog` pertmite registrar las acciones de una aplicación
para conocer el flujo de la reactividad.

1. Utilice alguna el script en `R/01-reactlog-example.R` y comente.

# Módulos { .bckgrnd background-image="imgs/guillaume-bolduc-uBe2mknURG4-unsplash.jpg"}
 
## Módulos

- Un módulo es un componente autocontenido y compuesto de una aplicación Shiny
    - Autocontenido como una función
    - Se pueden combinar para hacer una aplicación
    
. . .

- Tienen su propia interfaz de usuario y servidor (además de la interfaz de usuario y servidor de la **aplicación**)

. . .

- Útil para la reutilización
    - En lugar de copiar y pegar código, puede usar módulos. Incorporar en paquetes
    - Esencial para administrar la complejidad del código en aplicaciones más grandes


## Patrón de uso en UI: Antes {auto-animate=true}

```{r, eval=FALSE, echo=TRUE}
ui <- fluidPage(
  fluidRow(
    column(2, sliderInput("nrand", ...)),
    column(2, selectInput("dist", ...))),
    column(8, plotOutput("plot"))
  )
)
```

## Patrón de uso en UI: Ahora {auto-animate=true}

```{r, eval=FALSE, echo=TRUE}
moduloUI <- function(id) {

  ns <- NS(id)
  
  tagList(
    column(2, sliderInput(ns("rand"), ...)),
    column(2, selectInput(ns("dist"), ...))),
    column(8, plotOutput(ns("plot")))
  )
  
}

ui <- fluidPage(
  fluidRow(
    moduloUI("idmod")
    )
)
```

## Patrón de uso en Server: Antes {auto-animate=true}

```{r, eval=FALSE, echo=TRUE}
server <- function(input, output, session) {
  
      output$plot <- renderPlot({
        
        rdist <- switch(input$dist, "norm" = rnorm, "exp"  = rexp)
        hist(rdist(input$rand), xlim = c(-5, 5))
        
      })

}
```

## Patrón de uso en Server: Ahora {auto-animate=true}

```{r, eval=FALSE, echo=TRUE}
moduloServidor <- function(id) {
  moduleServer(id, function(input, output, session) {
      
      output$plot <- renderPlot({
        
        rdist <- switch(input$dist, "norm" = rnorm, "exp"  = rexp)
        hist(rdist(input$rand), xlim = c(-5, 5))
        
      })
      
  })
}

server <- function(input, output, session) {
  
  moduloServidor("idmod")
  
})
```

## Patrón de uso

Al cambiar a este flujo/framework de programación de aplicaciones shiny:

<br/>
Módulo UI:
El cambio en `id`s es explícito. Cambiar unInput(`"id")` por `unInput(NS("id"))`.
Se puede separar para tener distintas ubicaciones (ver ejemplos).

<br/>

Modulo Server:
La funcionalidad de implícita, uno _copia_ y _pega_, y el módulo hace
el intercambio correspondiente.

## Beneficio?

. . .

```{r, eval=FALSE, echo=TRUE}
source("ruta/hacia/modulo.R")

ui <- fluidPage(
  fluidRow(
    moduloUI("modulo1"),
    moduloUI("modulo2"),
    ...
    )
)

server <- function(input, output, session) {
  moduloServidor("modulo1")
  moduloServidor("modulo2")
  ...
})
```

## Revisar las siguientes apps

```{r eval=TRUE}
dir("apps/modulos/", full.names = TRUE) |> 
  purrr::map_chr(~ stringr::str_glue("- {.x}")) |> 
  purrr::walk(~ {cat(.x); cat("\n")})
```

## Ejercicio: Creando App, luego un módulo

1. Considerando el data set `iris`, genere una aplicación que tenga un selector
que liste las variables continuas y dado una variable realice un histograma.

1. Ahora transfórmelo en módulo y agregue tres instancias de dicho módulo con diferentes
tablas (`mtcars`, `diamonds`, `mtautos`, `diamantes`).

1. Extienda el módulo para incluir un output que muestre el `summary` de la variable
seleccionada.

1. Ideas? Preguntas?

# HTMLWidgets { .bckgrnd background-image="imgs/stephen-dawson-qwtCeJ5cLYs-unsplash.jpg"}

## HTMLWidgets

Usar librerías de visualización Javascript en R.

. . .

Los widgets se pueden incluir en documentos RMarkdown y aplicaciones web Shiny

. . .

HTMLwidgets puden ser una parte fundamental de una aplicación dado que
muestran visualizaciones.

## HTMLWidgets, eso es todo?

No!

...
<br>

Los widget pueden utilizarse como inputs a través de eventos Javascript!

::: aside
Ejemplo [https://odes-chile.org/app/estaciones/](https://odes-chile.org/app/estaciones/).
:::

## Revisar las siguientes apps

```{r results='asis'}
dir("apps/htmlwidgets/", full.names = TRUE) |> 
  purrr::map_chr(~ stringr::str_glue("- {.x}")) |> 
  purrr::walk(~ {cat(.x); cat("\n")})
```

## Ejercicio: Haciendo más con los eventos

1. Reutilice alguna app de la carpeta `htmlwidgets` para que al hacer click
sobre un sismo, se escriban todos la información del sismo en la ui.

1. Cree una app que genere un scatter plot de acuerdo a 2 inputs para indicar
variable x, variable y. Utilice un proxy para no _rebibujar_ el gráfico.

1. Para la aplicación anterior, conviértala en módulo.

1. Ideas? Preguntas?

# HTML, CSS, JS { .bckgrnd background-image="imgs/valery-sysoev-p9OkL4yW3C8-unsplash.jpg"}  

## HTML, CSS, JS

Hola

. . .

Chao

## Ejercicio: Implementando cosas

1. Revise este link y en la primera app de htmlwidgets realice lo necesario para
implementar [https://www.jumpingrivers.com/blog/improving-responsiveness-shiny-applications/](https://www.jumpingrivers.com/blog/improving-responsiveness-shiny-applications/).

1. Implemente de diferentes formas dicha _feature_.

# Eso! gracias! un gustazo!

## Créditos imágenes

Foto de <a href="https://unsplash.com/@dawson2406?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Stephen Dawson</a> en <a href="https://unsplash.com/es/fotos/qwtCeJ5cLYs?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>

Foto de <a href="https://unsplash.com/@guibolduc?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Guillaume Bolduc</a> en <a href="https://unsplash.com/es/fotos/uBe2mknURG4?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>


Foto de <a href="https://unsplash.com/@valerysysoev?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Valery Sysoev</a> en <a href="https://unsplash.com/es/fotos/p9OkL4yW3C8?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>
  
Foto de <a href="https://unsplash.com/@jannerboy62?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Nick Fewings</a> en <a href="https://unsplash.com/es/fotos/XqOBKnxDSfE?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>
  
  
  